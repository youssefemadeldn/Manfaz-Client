generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String  @unique
  phone            String  @unique
  password         String
  imageUrl         String  @default("https://res.cloudinary.com/dixa9yvlz/image/upload/v1741264530/Manfaz/default-profile.jpg")
  token            String?
  isVerified       Boolean @default(false)
  role             UserRole @default(user) // "user", "admin", "superadmin"
  verificationCode Int?
  createdAt        DateTime? @default(now()) 
  updatedAt        DateTime? @updatedAt 

  Worker Worker[]

  DeliveryDriver DeliveryDriver[]

  Order Order[]

  Wallet Wallet[]

  locations   UserLocation[]

  Review Review[]
}
enum UserRole {
  user
  store
  worker
}
model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  subName     String?    // New field for subName
  slug        String     @unique
  description String?
  info        String?    // New field for additional information
  price       Float?     // New field for price
  imageUrl    String?
  type        ServiceType                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  subType        ServiceSubType?                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  status      String     @default("active") // "active", "inactive", "archived"
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 
  services    Service[]

  Store Store[]

  WorkerCategory WorkerCategory[]
}
model WorkerCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  worker      Worker     @relation(fields: [workerId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
  workerId    String     @db.ObjectId
  categoryId  String     @db.ObjectId
}


enum ServiceType {
  service
  delivery
}

enum ServiceSubType {
  delivery_service
  delivery_product
}

model Service {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?
  categoryId  String     @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  type        ServiceType                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  subType        ServiceSubType?                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  price       Float?     // سعر الخدمة (اختياري)
  duration    Int?       // مدة الخدمة بالساعات (للعمالة المؤقتة)
  availability Boolean   @default(true) // هل الخدمة متاحة؟
  imageUrl    String?
  iconUrl    String?
  rating      Float      @default(4.0)  // تقييم الخدمة
  ratingCount Int       @default(0)    // عدد التقييمات
  warranty    Int?                     // فترة الضمان بالأيام
  installmentAvailable Boolean @default(false) // هل متاح التقسيط
  installmentMonths Int?               // عدد شهور التقسيط
  monthlyInstallment Float?            // قيمة القسط الشهري
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 

  parameters  ServiceParameter[]
}

model ServiceParameter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المعيار
  description String?    // وصف المعيار
  imageUrl    String?    // صورة توضيحية
  iconUrl    String?    @default("https://res.cloudinary.com/dixa9yvlz/image/upload/v1741301304/Manfaz/default-service-icon.png")
  price       Float      // السعر
  warranty    Int?       // فترة الضمان بالأيام
  installmentAvailable Boolean @default(false) // هل متاح التقسيط
  installmentMonths Int?      // عدد شهور التقسيط
  monthlyInstallment Float?   // قيمة القسط الشهري
  serviceId   String     @db.ObjectId
  service     Service    @relation(fields: [serviceId], references: [id])
  status      String     @default("active") // "active", "inactive"
  sortOrder   Int       @default(0)
  rating      Float?    @default(5.0)  // تقييم الخدمة
  ratingCount Int?      @default(1)    // عدد التقييمات
  duration    Int?
  availability Boolean? @default(true)
  // FAQ Fields
  faqs        Json?     // Array of FAQ objects
  whatIncluded Json?    // ما تشتمل عليه الخدمة
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Order Order[]
}

model Worker {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  user            User?     @relation(fields: [userId], references: [id])
  title           String    // الوظيفة (مثل "مصمم UX")
  description     String    // وصف مختصر للخبرة
  isAvailable     Boolean   @default(true)  // حالة الاتصال
  isFavorite      Boolean   @default(false) // محفوظ في المفضلة
  hourlyRate      Float     // السعر في الساعة بالدولار
  jobSuccessRate  Float     @default(0.0)   // معدل النجاح (0-100%)
  totalEarned     Float     @default(0.0)   // إجمالي الأرباح بالدولار
  skills          String[]  // قائمة مجالات الخبرة
  rating          Float     @default(0.0)
  reviewsCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isVerified      Boolean         @default(false)
  totalJobsDone   Int             @default(0)
  about           String?
  
  experiences     WorkExperience[]
  reviews         Review[]
  Order Order[]
  schedule Schedule[]

  WorkerCategory WorkerCategory[]
}
enum StatusEnum {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ShiftEnum {
  MORNING
  EVENING
  NIGHT
}

enum WorkerTypeEnum {
  DRIVER
  TECHNICIAN
  ELECTRICIAN
  PLUMBER
  OTHER
}

enum PriorityEnum {
  LOW
  MEDIUM
  HIGH
}

model Schedule {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  workerId       String       @db.ObjectId
  scheduledTime  DateTime
  date           DateTime
  day            String       // يوم الأسبوع مثل (Monday, Tuesday)
  shiftType      ShiftEnum    @default(MORNING) // نوع الدوام
  worker         Worker       @relation(fields: [workerId], references: [id], onDelete: Cascade)
  maxOrders      Int          @default(10) // الحد الأقصى للطلبات في اليوم
  ordersCount    Int          @default(0) // عدد الطلبات الحالية
  isFull         Boolean      @default(false) // هل الجدول ممتلئ؟
  location       String?      // الموقع الجغرافي (اختياري)
  workerType     WorkerTypeEnum // نوع العامل
  status         StatusEnum   @default(SCHEDULED) // حالة الجدولة
  priority       PriorityEnum @default(MEDIUM) // أولوية الجدول
  notes          String?      // ملاحظات إضافية
  createdAt      DateTime     @default(now()) // تاريخ الإنشاء
  updatedAt      DateTime     @updatedAt // آخر تحديث

  ScheduleOrder ScheduleOrder[]
}

model WorkExperience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  workerId    String   @db.ObjectId
  worker      Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
  title       String
  company     String
  duration    String
  description String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  workerId       String   @db.ObjectId
  worker         Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  orderId        String   @db.ObjectId
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  rating         Float
  comment        String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model DeliveryDriver {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  vehicleType String?    // نوع المركبة
  license     String?    // رقم الرخصة
  availability Boolean   @default(true)
  rating      Float      @default(0.0)
  reviewsCount Int       @default(0)
  completedOrders Int    @default(0) // عدد الطلبات المكتملة
  earnings    Float      @default(0.0) // الأرباح
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 

  Order Order[]
}

model OrdersStore {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products ProductsOrder[]
}
model Order {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?    @db.ObjectId
  user         User?      @relation(fields: [userId], references: [id])
  serviceId    String?    @db.ObjectId
  service      ServiceParameter?   @relation(fields: [serviceId], references: [id])
  providerId   String?    @db.ObjectId // العامل أو السائق
  provider     Worker?    @relation(fields: [providerId], references: [id])
  deliveryDriverId String? @db.ObjectId // السائق
  deliveryDriver DeliveryDriver? @relation(fields: [deliveryDriverId], references: [id])
  latitude Float?
  longitude Float?
  address String?
  notes        String?
  price        Float?
  duration     Int?
  status       OrderStatus     @default(pending) // "pending", "in_progress", "completed", "canceled"
  totalAmount  Float
  paymentStatus PaymentStatus    @default(pending) // "pending", "paid", "failed"
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 
  
  store        OrdersStore[]
  paymentMethod PaymentMethod?
  Review Review[]

  ScheduleOrder ScheduleOrder[]
}
model ProductsOrder{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  orders OrdersStore @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity Int
}

enum PaymentMethod {
  cash
  credit_card
  tamara
  tabby
}

model ScheduleOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  scheduleId  String   @db.ObjectId
  orderId     String   @db.ObjectId
  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  pending
  in_progress
  completed
  canceled
}

enum PaymentStatus {
  pending
  paid
  failed
}

model Wallet {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  balance     Float      @default(0.0)
  transactions Transaction[]
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 
}

model Transaction {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  walletId     String     @db.ObjectId
  wallet       Wallet?    @relation(fields: [walletId], references: [id])
  type         String     // "deposit" or "withdrawal"
  amount       Float
  status       String     @default("pending") // "pending", "completed", "failed"
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 
}

model Store {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المتجر
  description String?    // وصف المتجر
  type        String     // التصنيف الرئيسي (مثل: مأكولات ومشروبات)
  logo        String?    // شعار المتجر
  coverImage  String?    // صورة الغلاف
  images      String[]   // صور إضافية للمتجر
  address     String     // عنوان المتجر
  locations   StoreLocation[] // فروع المتجر
  phone       String?    // رقم الهاتف
  email       String?    // البريد الإلكتروني
  workingHours StoreWorkingHours[]
  categoryId   String?    @db.ObjectId
  category     Category?  @relation(fields: [categoryId], references: [id])
  rating      Float      @default(0.0)  // التقييم
  reviewsCount Int       @default(0)    // عدد التقييمات
  isActive    Boolean    @default(true) // حالة المتجر
  status      String     @default("active") // "active", "inactive", "closed"
  minOrderAmount Float?  // الحد الأدنى للطلب
  deliveryFee   Float?  // رسوم التوصيل
  priceDriver   Float?  // سعر التوصيل للسائق
  categories  StoreCategory[] // تصنيفات المتجر الداخلية
  products    Product[]      // المنتجات
  offers      StoreOffer[]   //ا  // الطلبات
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Coupon Coupon[]

  Discount Discount[]

  GiftCard GiftCard[]

  Reward Reward[]

  OrdersStore OrdersStore[]
}

model StoreLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الفرع
  address     String     // عنوان الفرع
  latitude    Float      // خط العرض
  longitude   Float      // خط الطول
  phone       String?    // رقم الهاتف
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم التصنيف (مثل: برجر، فرايد تشيكن)
  description String?    // وصف التصنيف
  image       String?    // صورة التصنيف
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  
  products    Product[]  // المنتجات في هذا التصنيف
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المنتج
  description String?    // وصف المنتج
  price       Float      // السعر الأساسي
  salePrice   Float?     // سعر العرض (إن وجد)
  images      String[]   // صور المنتج
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  categoryId  String     @db.ObjectId
  category    StoreCategory @relation(fields: [categoryId], references: [id])
  isAvailable Boolean    @default(true)
  ingredients String[]   // المكونات
  extras      Json?      // إضافات اختيارية (مثل: حجم إضافي، إضافات خاصة)
  stock       Int        @default(0)        // الكمية المتوفرة
  discountPrice Float?     // سعر العرض (إن وجد)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  ProductsOrder ProductsOrder[]
}

model StoreOffer {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم العرض
  description String?    // وصف العرض
  type        String     // نوع العرض (مثل: عروض رمضان، عروض اللمة)
  image       String?    // صورة العرض
  startDate   DateTime?  // تاريخ بداية العرض
  endDate     DateTime?  // تاريخ نهاية العرض
  discount    Float?     // قيمة الخصم
  isActive    Boolean    @default(true)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Discount {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الخصم
  description String?    // وصف الخصم
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الخصم
  endDate     DateTime   // تاريخ نهاية الخصم
  isActive    Boolean    @default(true)
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الخصم
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الخصم
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Coupon {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String     @unique // كود الكوبون
  name        String     // اسم الكوبون
  description String?    // وصف الكوبون
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الكوبون
  endDate     DateTime   // تاريخ نهاية الكوبون
  isActive    Boolean    @default(true)
  maxUses     Int?       // الحد الأقصى لاستخدام الكوبون
  usageCount  Int        @default(0) // عدد مرات الاستخدام
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الكوبون
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الكوبون
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum DiscountType {
  PERCENTAGE  // نسبة مئوية
  FIXED       // مبلغ ثابت
}

model GiftCard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String   @unique
  amount      Float
  balance     Float
  isActive    Boolean  @default(true)
  expiryDate  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String
  description String?
  type        String   // "free_product", "discount", "gift_card"
  value       Float
  pointsCost  Int      // تكلفة النقاط للحصول على المكافأة
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  name        String     // اسم العنوان (المنزل، العمل، الخ)
  address     String     // العنوان التفصيلي
  apartment   String?    // رقم الشقة
  floor       String?    // رقم الطابق
  building    String?    // رقم المبنى
  street      String?    // اسم الشارع
  area        String?    // المنطقة
  city        String     // المدينة
  latitude    Float
  longitude   Float
  isDefault   Boolean    @default(false) // هل هو العنوان الافتراضي
  type        String     // "home", "work", "other"
  notes       String?    // ملاحظات إضافية
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

}

model StoreWorkingHours {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  dayOfWeek   Int        // 0 للأحد، 1 للاثنين، الخ
  isOpen      Boolean    @default(true)
  openTime    String     // مثال: "09:00"
  closeTime   String     // مثال: "22:00"
  breakStart  String?    // وقت بداية الاستراحة (اختياري)
  breakEnd    String?    // وقت نهاية الاستراحة (اختياري)
  isSpecialDay Boolean   @default(false) // هل هو يوم خاص (عطلة، مناسبة)
  specialDate DateTime?  // تاريخ اليوم الخاص
  note        String?    // ملاحظات إضافية

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Employee {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String              @unique
  phone       String              @unique
  password    String
  imageUrl    String?             @default("https://res.cloudinary.com/dixa9yvlz/image/upload/v1741264530/Manfaz/default-profile.jpg")
  verificationCode Int
  role        EmployeeRole
  permissions EmployeePermissions @relation(fields: [permissionsId], references: [id])
  permissionsId String @db.ObjectId @unique
  isActive    Boolean             @default(true)
  lastLoginAt DateTime?
  activities  EmployeeActivity[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model EmployeePermissions {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  
  viewOrders             Boolean @default(false)
  updateOrders           Boolean @default(false)
  deleteOrders           Boolean @default(false)

  // إدارة العملاء
  viewCustomers          Boolean @default(false)  
  updateCustomers        Boolean @default(false)
  deleteCustomers        Boolean @default(false)

  // إدارة المواقع والعناوين
  viewLocations          Boolean @default(false)
  createLocations        Boolean @default(false)
  updateLocations        Boolean @default(false)
  deleteLocations        Boolean @default(false)

  // إدارة الخدمات
  viewServices           Boolean @default(false)
  createServices         Boolean @default(false)
  updateServices         Boolean @default(false)
  deleteServices         Boolean @default(false)

  // إدارة العروض والخصومات
  viewOffers             Boolean @default(false)
  createOffers           Boolean @default(false)
  updateOffers           Boolean @default(false)
  deleteOffers           Boolean @default(false)

  // إدارة التصنيفات
  viewCategories         Boolean @default(false)
  createCategories       Boolean @default(false)
  updateCategories       Boolean @default(false)
  deleteCategories       Boolean @default(false)

  // إدارة المتاجر
  viewStores             Boolean @default(false)
  createStores           Boolean @default(false)
  updateStores           Boolean @default(false)
  deleteStores           Boolean @default(false)

  // إدارة مقدمي الخدمات
  viewProviders          Boolean @default(false)
  createProviders        Boolean @default(false)
  approveProviders       Boolean @default(false)
  updateProviders        Boolean @default(false)
  deleteProviders        Boolean @default(false)

  // إدارة المحافظ والمدفوعات
  viewWallets            Boolean @default(false)
  manageTransactions     Boolean @default(false)

  // إدارة التقارير
  viewBasicReports       Boolean @default(false)
  viewAdvancedReports    Boolean @default(false)
  exportReports          Boolean @default(false)

  // إدارة الموظفين
  viewEmployees          Boolean @default(false)
  createEmployees        Boolean @default(false)
  updateEmployees        Boolean @default(false)
  deleteEmployees        Boolean @default(false)
  managePermissions      Boolean @default(false)

  // إدارة النظام
  manageSettings         Boolean @default(false)
  viewAuditLogs          Boolean @default(false)
  manageBackups          Boolean @default(false)

  // المكافآت
  viewRewards            Boolean @default(false)
  createRewards          Boolean @default(false)
  updateRewards          Boolean @default(false)
  deleteRewards          Boolean @default(false)

  // المواعيد
  viewSchedules          Boolean @default(false)
  createSchedules        Boolean @default(false)
  updateSchedules        Boolean @default(false)
  deleteSchedules        Boolean @default(false)

  // التقييمات
  viewReviews            Boolean @default(false)
  createReviews          Boolean @default(false)
  updateReviews          Boolean @default(false)
  deleteReviews          Boolean @default(false)

  // المدفوعات
  viewPayments           Boolean @default(false)
  createPayments         Boolean @default(false)
  updatePayments         Boolean @default(false)
  deletePayments         Boolean @default(false)

  // الكوبونات
  viewCoupons            Boolean @default(false)
  createCoupons          Boolean @default(false)
  updateCoupons          Boolean @default(false)
  deleteCoupons          Boolean @default(false)

  // الخصومات
  viewDiscounts          Boolean @default(false)
  createDiscounts        Boolean @default(false)
  updateDiscounts        Boolean @default(false)
  deleteDiscounts        Boolean @default(false)

  // البطاقات
  viewGiftCards          Boolean @default(false)
  createGiftCards        Boolean @default(false)
  updateGiftCards        Boolean @default(false)
  deleteGiftCards        Boolean @default(false)


  
  employee Employee?
}

model EmployeeActivity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String   @db.ObjectId
  action      String
  details     String
  oldData     Json?
  newData     Json?
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

enum EmployeeRole {
  customer_service
  sales
  supervisor
  admin
}



